<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd">

	<!--扫描 -->
	<context:component-scan base-package="com.smxy">
	</context:component-scan>
	<!-- Spring的配置文件，这里主要配置和业务逻辑有关 -->
	<!--=============================数据源，事务控制，xxxx===========================================... -->

	<!-- <context:property-placeholder location="classpath:dbconfig.properties"
		ignore-unresolvable="true" /> -->
	<bean id = "propertyConfigurer"  class = "org.springframework.beans.factory.config.PropertyPlaceholderConfigurer" >
	    <property  name ="location"  value ="classpath:dbconfig.properties"/>
	</bean>
	 <bean class="com.smx.LoginF" id="aa"/>  
<!-- 		<mvc:interceptors>  
    <mvc:interceptor>  
        <mvc:mapping path="/" />	
        <mvc:exclude-mapping path="/index"/>
        <bean class="com.smx.LoginF"/>  
    </mvc:interceptor>  
</mvc:interceptors>  -->

	<bean id="PooledDataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="driverClass" value="${jdbc.driver}"></property>
		<property name="jdbcUrl" value="${jdbc.url}"></property>
		<property name="user" value="${jdbc.user}"></property>
		<property name="password" value="${jdbc.password}"></property>
	</bean>

	<!-- ================配置和mybatis的整合================================================== -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!--指定mybatis的全局配置文件的位置 -->
		<property name="configLocation" value="classpath:mybatis-config.xml"></property>
		<property name="dataSource" ref="PooledDataSource"></property>
		<!--指定mybatis，mapper文件的位置 -->
		<property name="mapperLocations" value="classpath:mapper/*.xml"></property>
	</bean>

	<!--配置扫描器，将mybatis接口的实现加入到ico容器中 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!--扫描所有dao接口的实现，加入到IOC容器中 -->
		<property name="basePackage" value="com.smxy.dao"></property>
	</bean>
	
	
	<!-- 配置一个可以执行批量的sqlSession -->
    <bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
    	<constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory"></constructor-arg>
    	<constructor-arg name="executorType" value="BATCH"></constructor-arg>
    </bean>
	<!-- ############################################################# -->
	
	<!--==============================事务控制配置========================================== -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<!--控制数据源 -->
		<property name="dataSource" ref="PooledDataSource"></property>
	</bean>

	<!--开启基于注解的事物，使用XML配置形式的事物（主要的重要的都使用配置式） -->
	<aop:config>
		<!-- 切入点的表达式 -->
		<aop:pointcut expression="execution(* com.smxy.service..*(..))"
			id="txpoint" />
		<!-- 配置事务增强 -->
		<aop:advisor advice-ref="txAdvice" pointcut-ref="txpoint" />
	</aop:config>
	<!--事物如何切入 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager"><!--transaction-manager要如上面的id匹配 -->
		<tx:attributes>
			<!--所有方法都是事物的方法 -->
			<tx:method name="*" />
			<!--以get开始的所有方法 -->
			<tx:method name="get*" read-only="true" />
		</tx:attributes>
	</tx:advice>
	<!--Spring配置的核心点（数据源，与mybatis的整合，事务控制） -->
	

</beans>